#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

int main() {
    int m = 1000;
    int n = 1000;
    int p = 1000;
    int i, j, k;
    double **a, **b, **c;
    double start, end;

    // Allocate memory for matrices
    a = (double **) malloc(m * sizeof(double *));
    b = (double **) malloc(n * sizeof(double *));
    c = (double **) malloc(m * sizeof(double *));
    for (i = 0; i < m; i++) {
        a[i] = (double *) malloc(n * sizeof(double));
        c[i] = (double *) malloc(p * sizeof(double));
    }
    for (i = 0; i < n; i++) {
        b[i] = (double *) malloc(p * sizeof(double));
    }

    // Fill matrices with random numbers
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            a[i][j] = (double) rand() / RAND_MAX;
        }
    }
    for (i = 0; i < n; i++) {
        for (j = 0; j < p; j++) {
            b[i][j] = (double) rand() / RAND_MAX;
        }
    }

    // Multiply matrices using OpenMP threads
    start = omp_get_wtime();
    #pragma omp parallel for private(j, k)
    for (i = 0; i < m; i++) {
        for (j = 0; j < p; j++) {
            c[i][j] = 0.0;
            for (k = 0; k < n; k++) {
                c[i][j] += a[i][k] * b[k][j];
            }
        }
    }
    end = omp_get_wtime();

    // Print execution time
    printf("Execution time: %f seconds\n", end - start);

    // Deallocate memory
    for (i = 0; i < m; i++) {
        free(a[i]);
        free(c[i]);
    }
    for (i = 0; i < n; i++) {
        free(b[i]);
    }
    free(a);
    free(b);
    free(c);

    return 0;
}
