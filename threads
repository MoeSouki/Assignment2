#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<time.h>

#define M 1000
#define N 1000
#define P 1000

int A[M][N], B[N][P], C[M][P];

struct thread_data {
   int thread_id;
   int start;
   int end;
};

void *multiply_matrices(void *threadarg) {
   struct thread_data *my_data;
   my_data = (struct thread_data *) threadarg;

   int i, j, k;
   for (i = my_data->start; i < my_data->end; i++) {
      for (j = 0; j < P; j++) {
         C[i][j] = 0;
         for (k = 0; k < N; k++) {
            C[i][j] += A[i][k] * B[k][j];
         }
      }
   }
   pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
   int num_threads = atoi(argv[1]);
   int i, j, rc;
   pthread_t threads[num_threads];
   struct thread_data thread_data_array[num_threads];
   clock_t start, end;
   double cpu_time_used;

   // Initialize matrices A and B
   for (i = 0; i < M; i++) {
      for (j = 0; j < N; j++) {
         A[i][j] = rand() % 10;
      }
   }
   for (i = 0; i < N; i++) {
      for (j = 0; j < P; j++) {
         B[i][j] = rand() % 10;
      }
   }

   start = clock();

   // Create threads and calculate matrix multiplication
   for (i = 0; i < num_threads; i++) {
      thread_data_array[i].thread_id = i;
      thread_data_array[i].start = (M/num_threads) * i;
      thread_data_array[i].end = (M/num_threads) * (i+1);
      rc = pthread_create(&threads[i], NULL, multiply_matrices, (void *) &thread_data_array[i]);
      if (rc) {
         printf("ERROR; return code from pthread_create() is %d\n", rc);
         exit(-1);
      }
   }

   // Join threads
   for (i = 0; i < num_threads; i++) {
      rc = pthread_join(threads[i], NULL);
      if (rc) {
         printf("ERROR; return code from pthread_join() is %d\n", rc);
         exit(-1);
      }
   }

   end = clock();
   cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
   printf("Execution time for %d threads: %f seconds\n", num_threads, cpu_time_used);

   return 0;
}
